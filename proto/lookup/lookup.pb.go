// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: proto/lookup/lookup.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IpQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ip            string                 `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IpQuery) Reset() {
	*x = IpQuery{}
	mi := &file_proto_lookup_lookup_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IpQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpQuery) ProtoMessage() {}

func (x *IpQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_lookup_lookup_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpQuery.ProtoReflect.Descriptor instead.
func (*IpQuery) Descriptor() ([]byte, []int) {
	return file_proto_lookup_lookup_proto_rawDescGZIP(), []int{0}
}

func (x *IpQuery) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type IpResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       string                 `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Country       string                 `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	CountryCode   string                 `protobuf:"bytes,3,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	Continent     string                 `protobuf:"bytes,4,opt,name=continent,proto3" json:"continent,omitempty"`
	ContinentCode string                 `protobuf:"bytes,5,opt,name=continent_code,json=continentCode,proto3" json:"continent_code,omitempty"`
	Asn           uint32                 `protobuf:"varint,6,opt,name=asn,proto3" json:"asn,omitempty"`
	AsName        string                 `protobuf:"bytes,7,opt,name=as_name,json=asName,proto3" json:"as_name,omitempty"`
	AsDomain      string                 `protobuf:"bytes,8,opt,name=as_domain,json=asDomain,proto3" json:"as_domain,omitempty"`
	Tags          []string               `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IpResponse) Reset() {
	*x = IpResponse{}
	mi := &file_proto_lookup_lookup_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpResponse) ProtoMessage() {}

func (x *IpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_lookup_lookup_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpResponse.ProtoReflect.Descriptor instead.
func (*IpResponse) Descriptor() ([]byte, []int) {
	return file_proto_lookup_lookup_proto_rawDescGZIP(), []int{1}
}

func (x *IpResponse) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *IpResponse) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *IpResponse) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *IpResponse) GetContinent() string {
	if x != nil {
		return x.Continent
	}
	return ""
}

func (x *IpResponse) GetContinentCode() string {
	if x != nil {
		return x.ContinentCode
	}
	return ""
}

func (x *IpResponse) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *IpResponse) GetAsName() string {
	if x != nil {
		return x.AsName
	}
	return ""
}

func (x *IpResponse) GetAsDomain() string {
	if x != nil {
		return x.AsDomain
	}
	return ""
}

func (x *IpResponse) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type IpResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ip            string                 `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Response      *IpResponse            `protobuf:"bytes,2,opt,name=response,proto3,oneof" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IpResult) Reset() {
	*x = IpResult{}
	mi := &file_proto_lookup_lookup_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IpResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpResult) ProtoMessage() {}

func (x *IpResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_lookup_lookup_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpResult.ProtoReflect.Descriptor instead.
func (*IpResult) Descriptor() ([]byte, []int) {
	return file_proto_lookup_lookup_proto_rawDescGZIP(), []int{2}
}

func (x *IpResult) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IpResult) GetResponse() *IpResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

var File_proto_lookup_lookup_proto protoreflect.FileDescriptor

const file_proto_lookup_lookup_proto_rawDesc = "" +
	"\n" +
	"\x19proto/lookup/lookup.proto\x12\x11grpc.ipasn.lookup\"\x19\n" +
	"\aIpQuery\x12\x0e\n" +
	"\x02ip\x18\x01 \x01(\tR\x02ip\"\x84\x02\n" +
	"\n" +
	"IpResponse\x12\x18\n" +
	"\anetwork\x18\x01 \x01(\tR\anetwork\x12\x18\n" +
	"\acountry\x18\x02 \x01(\tR\acountry\x12!\n" +
	"\fcountry_code\x18\x03 \x01(\tR\vcountryCode\x12\x1c\n" +
	"\tcontinent\x18\x04 \x01(\tR\tcontinent\x12%\n" +
	"\x0econtinent_code\x18\x05 \x01(\tR\rcontinentCode\x12\x10\n" +
	"\x03asn\x18\x06 \x01(\rR\x03asn\x12\x17\n" +
	"\aas_name\x18\a \x01(\tR\x06asName\x12\x1b\n" +
	"\tas_domain\x18\b \x01(\tR\basDomain\x12\x12\n" +
	"\x04tags\x18\t \x03(\tR\x04tags\"g\n" +
	"\bIpResult\x12\x0e\n" +
	"\x02ip\x18\x01 \x01(\tR\x02ip\x12>\n" +
	"\bresponse\x18\x02 \x01(\v2\x1d.grpc.ipasn.lookup.IpResponseH\x00R\bresponse\x88\x01\x01B\v\n" +
	"\t_response2\xa0\x01\n" +
	"\x06Lookup\x12I\n" +
	"\fLookupSingle\x12\x1a.grpc.ipasn.lookup.IpQuery\x1a\x1b.grpc.ipasn.lookup.IpResult\"\x00\x12K\n" +
	"\n" +
	"LookupMany\x12\x1a.grpc.ipasn.lookup.IpQuery\x1a\x1b.grpc.ipasn.lookup.IpResult\"\x00(\x010\x01B&Z$github.com/63square/ipasn_demo/protob\x06proto3"

var (
	file_proto_lookup_lookup_proto_rawDescOnce sync.Once
	file_proto_lookup_lookup_proto_rawDescData []byte
)

func file_proto_lookup_lookup_proto_rawDescGZIP() []byte {
	file_proto_lookup_lookup_proto_rawDescOnce.Do(func() {
		file_proto_lookup_lookup_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_lookup_lookup_proto_rawDesc), len(file_proto_lookup_lookup_proto_rawDesc)))
	})
	return file_proto_lookup_lookup_proto_rawDescData
}

var file_proto_lookup_lookup_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_lookup_lookup_proto_goTypes = []any{
	(*IpQuery)(nil),    // 0: grpc.ipasn.lookup.IpQuery
	(*IpResponse)(nil), // 1: grpc.ipasn.lookup.IpResponse
	(*IpResult)(nil),   // 2: grpc.ipasn.lookup.IpResult
}
var file_proto_lookup_lookup_proto_depIdxs = []int32{
	1, // 0: grpc.ipasn.lookup.IpResult.response:type_name -> grpc.ipasn.lookup.IpResponse
	0, // 1: grpc.ipasn.lookup.Lookup.LookupSingle:input_type -> grpc.ipasn.lookup.IpQuery
	0, // 2: grpc.ipasn.lookup.Lookup.LookupMany:input_type -> grpc.ipasn.lookup.IpQuery
	2, // 3: grpc.ipasn.lookup.Lookup.LookupSingle:output_type -> grpc.ipasn.lookup.IpResult
	2, // 4: grpc.ipasn.lookup.Lookup.LookupMany:output_type -> grpc.ipasn.lookup.IpResult
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_lookup_lookup_proto_init() }
func file_proto_lookup_lookup_proto_init() {
	if File_proto_lookup_lookup_proto != nil {
		return
	}
	file_proto_lookup_lookup_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_lookup_lookup_proto_rawDesc), len(file_proto_lookup_lookup_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_lookup_lookup_proto_goTypes,
		DependencyIndexes: file_proto_lookup_lookup_proto_depIdxs,
		MessageInfos:      file_proto_lookup_lookup_proto_msgTypes,
	}.Build()
	File_proto_lookup_lookup_proto = out.File
	file_proto_lookup_lookup_proto_goTypes = nil
	file_proto_lookup_lookup_proto_depIdxs = nil
}
