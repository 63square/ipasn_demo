// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/lookup.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Lookup_LookupSingle_FullMethodName = "/grpc.ipasn.lookup.Lookup/LookupSingle"
	Lookup_LookupMany_FullMethodName   = "/grpc.ipasn.lookup.Lookup/LookupMany"
)

// LookupClient is the client API for Lookup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LookupClient interface {
	LookupSingle(ctx context.Context, in *IpQuery, opts ...grpc.CallOption) (*IpResult, error)
	LookupMany(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[IpQuery, IpResult], error)
}

type lookupClient struct {
	cc grpc.ClientConnInterface
}

func NewLookupClient(cc grpc.ClientConnInterface) LookupClient {
	return &lookupClient{cc}
}

func (c *lookupClient) LookupSingle(ctx context.Context, in *IpQuery, opts ...grpc.CallOption) (*IpResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IpResult)
	err := c.cc.Invoke(ctx, Lookup_LookupSingle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookupClient) LookupMany(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[IpQuery, IpResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Lookup_ServiceDesc.Streams[0], Lookup_LookupMany_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[IpQuery, IpResult]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Lookup_LookupManyClient = grpc.BidiStreamingClient[IpQuery, IpResult]

// LookupServer is the server API for Lookup service.
// All implementations must embed UnimplementedLookupServer
// for forward compatibility.
type LookupServer interface {
	LookupSingle(context.Context, *IpQuery) (*IpResult, error)
	LookupMany(grpc.BidiStreamingServer[IpQuery, IpResult]) error
	mustEmbedUnimplementedLookupServer()
}

// UnimplementedLookupServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLookupServer struct{}

func (UnimplementedLookupServer) LookupSingle(context.Context, *IpQuery) (*IpResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupSingle not implemented")
}
func (UnimplementedLookupServer) LookupMany(grpc.BidiStreamingServer[IpQuery, IpResult]) error {
	return status.Errorf(codes.Unimplemented, "method LookupMany not implemented")
}
func (UnimplementedLookupServer) mustEmbedUnimplementedLookupServer() {}
func (UnimplementedLookupServer) testEmbeddedByValue()                {}

// UnsafeLookupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LookupServer will
// result in compilation errors.
type UnsafeLookupServer interface {
	mustEmbedUnimplementedLookupServer()
}

func RegisterLookupServer(s grpc.ServiceRegistrar, srv LookupServer) {
	// If the following call pancis, it indicates UnimplementedLookupServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Lookup_ServiceDesc, srv)
}

func _Lookup_LookupSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupServer).LookupSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lookup_LookupSingle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupServer).LookupSingle(ctx, req.(*IpQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lookup_LookupMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LookupServer).LookupMany(&grpc.GenericServerStream[IpQuery, IpResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Lookup_LookupManyServer = grpc.BidiStreamingServer[IpQuery, IpResult]

// Lookup_ServiceDesc is the grpc.ServiceDesc for Lookup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lookup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ipasn.lookup.Lookup",
	HandlerType: (*LookupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LookupSingle",
			Handler:    _Lookup_LookupSingle_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LookupMany",
			Handler:       _Lookup_LookupMany_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/lookup.proto",
}
